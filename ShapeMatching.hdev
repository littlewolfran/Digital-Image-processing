<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>*---------------------------------------------------------</c>
<c>*This example program shows how to reuse a created model</c>
<c>*---------------------------------------------------------</c>
<c>*general configuration of HDevelop</c>
<l>dev_update_window ('off')</l>
<c>*image acquisition and window size</c>
<l>read_image (ModelImage, 'F:/Halcon进阶/Image/rings_and_nuts.png')</l>
<l>get_image_pointer1 (ModelImage, Pointer, Type, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_set_part (0, 0, Height-1, Width-1)</l>
<l>dev_display (ModelImage)</l>
<c>*colors and other settings for the visualization</c>
<l>dev_set_color ('cyan')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (2)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>*----------------------start of the first application ---------</c>
<c>*-&gt;create the model</c>
<l>Row:=324</l>
<l>Column:=279</l>
<l>Radius:=60</l>
<l>gen_circle (ROI1, Row, Column, Radius)</l>
<l>gen_circle (ROI2, Row, Column, 0.5*Radius)</l>
<l>difference (ROI1, ROI2, ModelROI)</l>
<l>reduce_domain (ModelImage, ModelROI, ImageROI)</l>
<l>create_scaled_shape_model (ImageROI, 'auto', -rad(30), rad(60), 'auto', 0.6, 1.4, 'auto', 'none', 'use_polarity', 60, 10, ModelID)</l>
<l>inspect_shape_model (ImageROI, ShapeModelImage, ShapeModelRegion, 1, 30)</l>
<l>dev_clear_window ()</l>
<l>dev_display (ShapeModelRegion)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>*step1:store the model(including the XLD)</c>
<l>ModelFile:='model_nut.sbm'</l>
<l>write_shape_model (ModelID, ModelFile)</l>
<c>*addtionally we store the model region</c>
<l>ModelRegionFile:='model_region_nut.png'</l>
<l>write_image (ImageROI, 'png', 0, ModelRegionFile)</l>
<c>*clear the model and start a new one</c>
<l>clear_shape_model (ModelID)</l>
<c>*----------start of second application---------</c>
<l>read_shape_model (ModelFile, ReuseModelID)</l>
<c>*access the parameters used for creating the model</c>
<l>get_shape_model_contours (ReusedShapeModel, ReuseModelID, 1)</l>
<l>get_shape_model_origin (ReuseModelID, ReusedRefPointRow, ReusedRefPointCol)</l>
<l>get_shape_model_params (ReuseModelID, NumLevels, AngleStart, AngleExtent, AngleStep, ScaleMin, ScaleMax, ScaleStep, Metric, MinContrast)</l>
<c>*-&gt;acess the model region</c>
<l>read_image (ImageModelRegion, 'model_region_nut.png')</l>
<l>get_domain (ImageModelRegion, DomainModelRegion)</l>
<l>dev_display (ImageModelRegion)</l>
<l>dev_display (DomainModelRegion)</l>
<l>stop ()</l>
<c>*step3:search for the objects</c>
<l>read_image (SearchImage, 'rings_and_nuts')</l>
<l>dev_display (SearchImage)</l>
<l>find_scaled_shape_model (SearchImage, ReuseModelID, AngleStart, AngleExtent, ScaleMin, ScaleMax, 0.65, 0, 0, 'least_squares', 0, 0.8, RowCheck, ColumnCheck, AngleCheck, ScaleCheck, Score)</l>
<l>for i:=0 to |Score|-1 by 1</l>
<l>    vector_angle_to_rigid (ReusedRefPointRow, ReusedRefPointCol, 0, RowCheck[i], ColumnCheck[i], AngleCheck[i], MovementOfObject)</l>
<l>    hom_mat2d_scale (MovementOfObject, ScaleCheck[i], ScaleCheck[i], RowCheck[i], ColumnCheck[i], MoveAndScalingOfObject)</l>
<l>    affine_trans_contour_xld (ReusedShapeModel, ModelAtNewPosition, MoveAndScalingOfObject)</l>
<l>    dev_display (ModelAtNewPosition)</l>
<l>endfor</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>clear_shape_model (ModelID)</l>
<c>* ------------  end of the application  ------------</c>
<c>* clean up</c>
<l>dev_update_window ('on')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
